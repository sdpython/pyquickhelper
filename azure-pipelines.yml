jobs:
- job: 'TestLinux'
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python39:
        python.version: '3.9'
    maxParallel: 3

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: sudo apt-get update
    displayName: 'AptGet Update'
  - script: sudo apt-get install -y inkscape
    displayName: 'Install Inkscape'
  - script: sudo apt-get install -y pandoc
    displayName: 'Install Pandoc'
  - script: sudo apt-get install -y texlive texlive-latex-extra texlive-xetex dvipng
    displayName: 'Install Latex'
  - script: sudo apt-get install -y p7zip-full
    displayName: 'Install 7z, rar'
  - script: sudo apt-get install -y graphviz
    displayName: 'Install Graphviz'
  - script: python -m pip install --upgrade pip setuptools wheel
    displayName: 'Install tools'
  - script: pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: python -m pip install scikit-learn
    displayName: 'Install scipy scikit-learn'    
  - script: python -m pip install tkinterquickhelper --no-deps
    displayName: 'Install tkinterquickhelper'    
  - script: pip uninstall -y pyquickhelper
    displayName: 'uninstall pyquickhelper'
  - script: export PYTHONPATH=src
    displayName: 'PYTHONPATH=src'
  - script: |
          export PYTHONPATH=src
          python -u setup.py unittests -d 5
    displayName: 'Runs Unit Tests'
  - script: |
          export PYTHONPATH=src
          python -u setup.py bdist_wheel
    displayName: 'Build Package'
#  - script: python -u setup.py build_sphinx
#    displayName: 'Builds Documentation'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-linux-$(python.version)'
      targetPath: 'dist'

- job: 'TestMac'
  pool:
    vmImage: 'macOS-latest'
  strategy:
    matrix:
      Python39:
        python.version: "3.9"

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'
  - script: gcc --version
    displayName: 'gcc version'

  - script: |
          brew update
    displayName: 'brew update'
  - script: export
    displayName: 'export'
  - script: gcc --version
    displayName: 'gcc version'
  - script: brew upgrade p7zip
    continueOnError: true
    displayName: 'Install p7zip'
  - script: brew install pandoc
    displayName: 'Install Pandoc'
  - script: brew install graphviz
    continueOnError: true
    displayName: 'Install Graphviz'
  - script: brew install cairo pango gdk-pixbuf libffi
    displayName: 'Install cairo pango gdk-pixbuf libffi'
  - bash: echo "##vso[task.prependpath]$CONDA/bin"
    displayName: Add conda to PATH.
  - bash: sudo chown -R $USER $CONDA
    displayName: Take ownership of conda installation
  - bash: conda update conda --yes --quiet
    displayName: Update conda.
  - script: brew install --cask mactex
    continueOnError: true
    displayName: 'Install latex'
  - bash: conda create --yes --quiet --name pyenv -c defaults -c conda-forge python=$PYTHON_VERSION tox sphinx jupyter Cython numpy mkl scipy scikit-learn pandas coverage pylint pip
    displayName: Create Anaconda environment.
  - bash: source activate pyenv
  - script: |
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python get-pip.py
    displayName: Install pip
  - script: python -m pip install wheel setuptools
    displayName: 'Install wheel, setuptools'
  - script: python -m pip install pyquicksetup
    displayName: 'Install pyquicksetup'
  - script: python -m pip install -r requirements.txt
    displayName: 'Install Requirements'
  - script: export PYTHONPATH=src
    displayName: 'PYTHONPATH=src'
  - script: |
          export PYTHONPATH=src
          python -c "import pyquickhelper;print(pyquickhelper.__file__)"
    displayName: 'check 1'
  - script: |
          python -c "import pyquicksetup;print(pyquicksetup.__file__)"
    displayName: 'check 2'
  - script: |
          export PYTHONPATH=src:src/quicksetup
          python -u setup.py unittests -d 5
    displayName: 'Runs Unit Tests'
  - script: |
          export PYTHONPATH=src
          python -u setup.py bdist_wheel
    displayName: 'Build Package'
  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'wheel-mac-$(python.version)'
      targetPath: 'dist'
